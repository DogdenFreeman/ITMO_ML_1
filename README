Сервис регистрации посещаемости студентов

Описание Проекта:

Этот проект представляет собой базовый вариант системы регистрации посещаемости студентов в рамках учебного заведения.
Система включает в себя историю посещений по предметам и урокам, механизм предсказания будущей посещаемости с помощью машинного обучения, а также базовую систему управления балансом пользователя с возможностью проведения транзакций для последующего расширения функционала (покупки услуг ВУЗа, еды, начисление стипендий).

Проект развернут с использованием (инструментария, предложенного в уроках по этому блоку) Docker Compose, объединяя несколько сервисов: основное веб-приложение (API на FastAPI), фоновый worker для ML-задач, базу данных PostgreSQL, брокер сообщений RabbitMQ и веб-прокси Nginx.

Функционал сервиса:
    Управление учебным процессом:
        Создание, просмотр, редактирование и удаление информации о предметах и отдельных уроках по этим предметам.
    Регистрация Посещаемости:
        Фиксация фактов посещения или отсутствия студентов на конкретных уроках.
        Ведение детальной Истории Посещаемости для каждого студента по каждому предмету.
    Машинное Обучение и Предсказания:
        API для создания Запросов на Предсказание будущей посещаемости студента на основе его предыдущей истории.
        Фоновый Worker обрабатывает эти запросы асинхронно, выполняя ML-модель (ml_model.py).
        Сохранение результатов предсказания в базе данных, доступных через API.
    Система Баланса и Транзакций:
        Каждый пользователь (студент) имеет свой Баланс.
        Реализован механизм создания Транзакций, изменяющих баланс пользователя.
        Система спроектирована с учетом возможного расширения для интеграции с сервисами учебного заведения (оплата услуг, начисление стипендий, оплата питания и т.д.).
    Управление Пользователями:
        Поддержка различных ролей пользователей (например, суперпользователь с полным доступом и обычные пользователи - студенты).
        API для регистрации и аутентификации пользователей (на основе JWT-токенов).

Архитектура сервисов:

app (FastAPI): Основной веб-сервис, предоставляющий API для всех описанных выше операций.
worker (Python Worker): Фоновый процесс, подписанный на очередь RabbitMQ, обрабатывающий тяжелые задачи (ML-предсказания).
database (PostgreSQL): СУБД для надежного хранения всех данных проекта.
rabbitmq: Брокер сообщений, используемый для постановки в очередь и доставки задач для `worker`.
web-proxy (Nginx): Входная точка для всех внешних HTTP-запросов, перенаправляющая их на сервис `app`. Также может обслуживать статическое содержимое.

