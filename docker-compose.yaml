services:
  app:
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - "8000:8000"
    env_file:
      - .env
    depends_on:
      database:
        condition: service_healthy
      rabbitmq:
        condition: service_started
    restart: unless-stopped
    networks:
      - backend_network
    volumes:
      - ./app:/app
  web-proxy:
    image: nginx:1.25-alpine
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/conf.d/default.conf:ro
    ports:
      - "80:80"
    depends_on:
      - app
    restart: unless-stopped
    networks:
      - backend_network

  database:
    image: postgres:16-alpine
    volumes:
      - db_data:/var/lib/postgresql/data
    env_file:
      - .env
    ports:
      - "5432:5432"
    restart: unless-stopped
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB" ]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - backend_network

  rabbitmq:
    image: rabbitmq:3.13-management-alpine
    ports:
      - "5672:5672"
      - "15672:15672"
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    restart: on-failure
    networks:
      - backend_network
  worker:
    build:
      context: . # Контекст сборки - корень проекта
      dockerfile: app/workers/Dockerfile # Путь к Dockerfile
    env_file:
      - .env
    depends_on:
      - rabbitmq
      - database
    networks:
      - backend_network
    volumes:
      - ./app/workers:/app # монтируем только папку воркера

volumes:
  db_data:
    driver: local
  rabbitmq_data:
    driver: local

networks:
  backend_network:
    driver: bridge